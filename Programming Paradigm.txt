Programming Paradigm
=====================


Programming paradigm refers to methods and techniques that are used while writing source code, as to make it easier to read and understand later on by yourself or other programmers.

It also helps in making the source code more optimized and flexible when you want to make changes to it, as well as be able to isolated faults and make them easier to detect.

Example:

# Imperative Paradigm
Imperative programming is a paradigm describing HOW the program should do something by explicitly specifying each instruction (or statement) step by step, which mutate the program's state. and it contains:

-Procedural Programming
In procedural programming, the user is encouraged to subdivide the program execution into functions, as a way of improving modularity and organization.

-Object-Oriented Programming
Object-Oriented Programming revolves around the concept of objects, which are instances of classes. It organizes code into objects that encapsulate data and behavior. OOP promotes modularity, reusability, and allows for concepts such as inheritance, polymorphism, and encapsulation.

# Declarative Paradigm
Declarative programming is a paradigm describing WHAT the program does, without explicitly specifying its control flow while the state is automatically handled by the coding language and/or the framework. It contains:


-Functional Programming
 functional programming encourages programs written mostly with functions. It also defends the idea that code modularity and the absence of side effects makes it easier to identify and separate responsibilities within the codebase. This therefore improves the code maintainability.


-